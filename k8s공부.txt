2024.01.09 화

컨테이너: 세팅된 환경(라이브러리 등...) + 프로그램 => 어떤 환경에서 실행하기 위한 모든 요소(특정 버전의 프로그래밍 언어 런타임/라이브러리와 같은 종속 항목+애플리케이션 코드)를 포함하는 소프트웨어 패키지
	컨테이너의 주 목적: 배포를 좀 더 수월하게!!하기위해서
		가상머신처럼 동작하지만 별개 OS를 필요로 하지 X, 그러나 가상머신처럼 구분되어있음!
도커: 기반 OS와 커널로 연결하여 컨테이너를 실행시킬 수 있는 플랫폼

멀티호스트 도커 플랫폼 => 프로그램의 안정성을 위해 도커 플랫폼을 여러개로 나누어 분산하여 운영하는 것
	BUT, 각 플랫폼에서 컨테이너를 관리하기가 쉽지 않음(컨테이너를 
컨테이너 오케스트레이션 => 위 문제를 해결하기 위해 control plane을 통해 worker node들을 관리해주는 것

컨테이너 계층구조
6층: Development Workflow Opinionated Containers: ~
5층: Orchestration/Scheduling Service Model: >>쿠버네티스 Kubernetes<<, Docker Swarm, Nomad 등등...
4층: Container Engine: >>도커 Docker<<, Rocket, RunC 등등 컨테이너 엔진
3층: OS(Operating System): 우분투, RHEL, CoreOS 등 운영체제
2층: 가상(Virtual) Infrastructure: 오픈스택, vSphere, EC2, GCP, Azure 등... 잘모르겠음(ㅠㅠ) 찾아보기
1층: 실제(Physical) Infrastructure: 컴퓨터/네트워크/저장소

쿠버네티스(K8s): 컨테이너화된 애플리케이션을 자동으로 배포/스케일링/관리해주는 오케스트레이션 프로그램
	- 워크로드가 분리되어있음
	- 어디서나 실행가능함(온프레미스(:)든 퍼블릭 클라우드(: e.g. AKS, EKS, GKE 등)
	- 선언적 API: 멀티호스트 플랫폼에서 control plane을 통해 요청(ex: 웹서버 컨테이너를 3개 실행~)을 했을 때, 쿠버네티스에서 자체적으로 요청한 상태를 유지하기 위해 노드와 컨테이너를 관리해줌

++ 듣다가 주제외로 궁금해진 거
Node.js: 
	비동기 자바스크립트: 함수가 리턴되기 전에도 메인 스레드가 돌아가도록 하는 ~ (프기2 채팅프로그램 스레딩 생각하면 편함!)

-----------------------------------------------------

2024.01.11 목
쿠버네티스 클러스터를 직접 구성하는 도구
kubeadm: 공식 클러스터 생성/관리 도구
kubespray: 쿠버네티스 클러스터를 배포하는 오픈소스 프로젝트, 온프레미스에서 상용 서비스 클러스터 운영시 유용

CNI(Container Network Interface): 컨테이너간 통신을 지원하는 VxLAN (Pod Network라고도 부름)
	플라넬, 칼리코, 위브넷 등이 있음! 종류 상관없이 하나는 있어야 컨테이너간 통신이 됨...
	network-CNI / Pod Network / VxLAN / Overlay

쿠버네티스 클러스터 구성
control plane(master node): 워커 노드들의 상태를 관리하고 제어
	- single master와 multi master(3, 5개의 master nodes)로 할 수 있음
worker node: 도커 플랫폼을 통해 컨테이너를 동작하며 실제 서비스를 제공하는 노드

+ 우분투 리눅스는 LTS(Long Term Support) 버전을 사용해야함!! LTS만 버전 출시 이후 5년까지 보증하니까,, 보통 기업에서도 이 버전을 많이 사용

-----------------------------------------------------

2024.01.14 일
(Docker Playground로 우선 실습함)
마스터 노드 세팅
kubeadm init --apiserver-advertise-address $(hostname -i) --pod-network-cidr 10.5.0.0/16
kubectl apply -f https://raw.githubusercontent.com/cloudnativelabs/kube-router/master/daemonset/kubeadm-kuberouter.yaml

워커 노드 세팅
kubeadm join 192.168.0.23:6443 --token fhpnbg.p76ob7nuokoejxw0 \
        --discovery-token-ca-cert-hash sha256:ac5c7a1a055dfb925dc83affe68a65ae777a8dd9f207ff5553637e72a12a6074

kubeadm <<을 이용...

kubectl 명령어 기본 구조)
kubectl [command] [TYPE][NAME][flag]
	command: 자원에 실행할 명령(create, get, delete, edit ... )
	TYPE: 자원의 타입(node, pod, service ... )
	NAME: 자원의 이름(소문자/숫자/대시문자 사용 가능)
	flags: 부가적으로 설정할 옵션(--help, -o options ...)

* -(dash)가 하나 있는 명령 > 시스템5계열의 커맨드 옵션 / --가 두개 있는 명령 DS?계열의 커맨드 옵션
커맨드

pod 실행
kubectl run
kubectl create
kubectl create -f (yaml 파일)

쿠버네티스 동작원리
1. 개발자가 허브에 도커 컨테이너를 push함
2. 1의 컨테이너가 image 형태로 허브에 push됨
3. k8s에서 2의 image를 통해 컨테이너 생성을 요청함
4. 3의 요청이 마스터 노드의 REST API Server로 전송됨
5. 마스터 노드의 REST API Server에서 요청에 따라 work node를 스케쥴링해서 반환
6. 5에서 반환된 worker node의 kubelet이 요청됨
7. 6의 요청을 Docker 명령으로 변환하여 실제 컨테이너를 실행하는 요청을 함 -> 
8. 컨테이너(pod)가 생성됨

